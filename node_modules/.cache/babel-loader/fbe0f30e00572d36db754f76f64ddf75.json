{"ast":null,"code":"var _jsxFileName = \"/Users/matt/Facemesh/facemesh/src/App.js\",\n    _s = $RefreshSig$();\n\n//install dependencies DONE\n//import dependiencies DONE\n//setup webcam and canvas DONE\n//define references to those DONE\n//load facemesh DONE\n//detect function\n//drawing utilities\n//load triangulation\n//setup triangle path\n//setup point drawing\n//add drawmesh to detect function\nimport { useRef } from 'react'; //import logo from './logo.svg';\n\nimport './App.css';\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as faceLandmarksDetection from '@tensorflow-models/face-landmarks-detection'; //at one point i was suppose to use facemesh but this no longer is supported\n//import * as facemesh from \"@tensorflow-models/facemesh\";\n\nimport Webcam from \"react-webcam\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  //set up references\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null); // load facemesh\n\n  const runFacemesh = async () => {\n    console.log('hi');\n    const net = await faceLandmarksDetection.load(faceLandmarksDetection.SupportedPackages.mediapipeFacemesh);\n    setInterval(() => {\n      detect(net);\n    }, 1500);\n  }; // detect function\n\n\n  const detect = async net => {\n    //check to make sure webcame is ready for detection\n    if (typeof webcamRef.currrent !== \"undefined\" && webcamRef.current !== null && webcamRef.current.video.readyState === 4) {\n      await tf.setBackend('cpu'); //get video properties\n\n      const video = webcamRef.current.video;\n      const videoWidth = webcamRef.current.video.videoWidth;\n      const videoHeight = webcamRef.current.video.videoHeight; //set video width\n\n      webcamRef.current.video.width = videoWidth;\n      webcamRef.current.video.height = videoHeight; //set canvas width\n\n      canvasRef.current.width = videoWidth;\n      canvasRef.current.height = videoHeight; //make detections\n\n      const face = await net.estimateFaces(video);\n\n      if (face) {\n        console.log(face);\n      } // get canvas context for drawing\n\n    }\n  };\n\n  runFacemesh();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(Webcam, {\n        ref: webcamRef,\n        style: {\n          position: \"absolute\",\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          left: 0,\n          right: 0,\n          textAlign: \"center\",\n          zIndex: 9,\n          width: 640,\n          height: 480\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        style: {\n          position: \"absolute\",\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          left: 0,\n          right: 0,\n          textAlign: \"center\",\n          zIndex: 9,\n          width: 640,\n          height: 480\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"AwQWgsmsPhWgADiRou0jnDEtoH4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/matt/Facemesh/facemesh/src/App.js"],"names":["useRef","tf","faceLandmarksDetection","Webcam","App","webcamRef","canvasRef","runFacemesh","console","log","net","load","SupportedPackages","mediapipeFacemesh","setInterval","detect","currrent","current","video","readyState","setBackend","videoWidth","videoHeight","width","height","face","estimateFaces","position","marginLeft","marginRight","left","right","textAlign","zIndex"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAQA,MAAR,QAAqB,OAArB,C,CACA;;AACA,OAAO,WAAP;AACA,OAAO,KAAKC,EAAZ,MAAoB,kBAApB;AACA,OAAO,KAAKC,sBAAZ,MAAwC,6CAAxC,C,CACA;AACA;;AACA,OAAOC,MAAP,MAAmB,cAAnB;;;AAGA,SAASC,GAAT,GAAe;AAAA;;AACb;AACA,QAAMC,SAAS,GAAGL,MAAM,CAAC,IAAD,CAAxB;AACA,QAAMM,SAAS,GAAGN,MAAM,CAAE,IAAF,CAAxB,CAHa,CAKb;;AACA,QAAMO,WAAW,GAAG,YAAW;AAC7BC,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACA,UAAMC,GAAG,GAAG,MAAMR,sBAAsB,CAACS,IAAvB,CAA4BT,sBAAsB,CAACU,iBAAvB,CAAyCC,iBAArE,CAAlB;AACAC,IAAAA,WAAW,CAAC,MAAI;AACdC,MAAAA,MAAM,CAACL,GAAD,CAAN;AACD,KAFU,EAET,IAFS,CAAX;AAGD,GAND,CANa,CAcb;;;AACA,QAAMK,MAAM,GAAG,MAAML,GAAN,IAAa;AAC1B;AACA,QACE,OAAOL,SAAS,CAACW,QAAjB,KAA8B,WAA9B,IAA6CX,SAAS,CAACY,OAAV,KAAsB,IAAnE,IAA2EZ,SAAS,CAACY,OAAV,CAAkBC,KAAlB,CAAwBC,UAAxB,KAAqC,CADlH,EACoH;AAChH,YAAMlB,EAAE,CAACmB,UAAH,CAAc,KAAd,CAAN,CADgH,CAEhH;;AACA,YAAMF,KAAK,GAAGb,SAAS,CAACY,OAAV,CAAkBC,KAAhC;AACA,YAAMG,UAAU,GAAGhB,SAAS,CAACY,OAAV,CAAkBC,KAAlB,CAAwBG,UAA3C;AACA,YAAMC,WAAW,GAAGjB,SAAS,CAACY,OAAV,CAAkBC,KAAlB,CAAwBI,WAA5C,CALgH,CAMhH;;AACAjB,MAAAA,SAAS,CAACY,OAAV,CAAkBC,KAAlB,CAAwBK,KAAxB,GAAgCF,UAAhC;AACAhB,MAAAA,SAAS,CAACY,OAAV,CAAkBC,KAAlB,CAAwBM,MAAxB,GAAiCF,WAAjC,CARgH,CAShH;;AACAhB,MAAAA,SAAS,CAACW,OAAV,CAAkBM,KAAlB,GAA0BF,UAA1B;AACAf,MAAAA,SAAS,CAACW,OAAV,CAAkBO,MAAlB,GAA2BF,WAA3B,CAXgH,CAYhH;;AACA,YAAMG,IAAI,GAAG,MAAMf,GAAG,CAACgB,aAAJ,CAAkBR,KAAlB,CAAnB;;AACA,UAAIO,IAAJ,EAAS;AACPjB,QAAAA,OAAO,CAACC,GAAR,CAAYgB,IAAZ;AACD,OAhB+G,CAiBhH;;AACD;AACJ,GAtBD;;AAwBAlB,EAAAA,WAAW;AACX,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACE;AAAQ,MAAA,SAAS,EAAC,YAAlB;AAAA,8BACA,QAAC,MAAD;AAAQ,QAAA,GAAG,EAAEF,SAAb;AAAwB,QAAA,KAAK,EAC3B;AACAsB,UAAAA,QAAQ,EAAC,UADT;AAEAC,UAAAA,UAAU,EAAE,MAFZ;AAGAC,UAAAA,WAAW,EAAE,MAHb;AAIAC,UAAAA,IAAI,EAAE,CAJN;AAKAC,UAAAA,KAAK,EAAE,CALP;AAMAC,UAAAA,SAAS,EAAE,QANX;AAOAC,UAAAA,MAAM,EAAE,CAPR;AAQAV,UAAAA,KAAK,EAAE,GARP;AASAC,UAAAA,MAAM,EAAE;AATR;AADF;AAAA;AAAA;AAAA;AAAA,cADA,eAcA;AAAQ,QAAA,GAAG,EAAElB,SAAb;AACA,QAAA,KAAK,EACH;AACEqB,UAAAA,QAAQ,EAAC,UADX;AAEEC,UAAAA,UAAU,EAAE,MAFd;AAGEC,UAAAA,WAAW,EAAE,MAHf;AAIEC,UAAAA,IAAI,EAAE,CAJR;AAKEC,UAAAA,KAAK,EAAE,CALT;AAMEC,UAAAA,SAAS,EAAE,QANb;AAOEC,UAAAA,MAAM,EAAE,CAPV;AAQEV,UAAAA,KAAK,EAAE,GART;AASEC,UAAAA,MAAM,EAAE;AATV;AAFF;AAAA;AAAA;AAAA;AAAA,cAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAiCD;;GAzEQpB,G;;KAAAA,G;AA2ET,eAAeA,GAAf","sourcesContent":["//install dependencies DONE\n//import dependiencies DONE\n//setup webcam and canvas DONE\n//define references to those DONE\n//load facemesh DONE\n//detect function\n//drawing utilities\n//load triangulation\n//setup triangle path\n//setup point drawing\n//add drawmesh to detect function\n\nimport {useRef} from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as faceLandmarksDetection from '@tensorflow-models/face-landmarks-detection';\n//at one point i was suppose to use facemesh but this no longer is supported\n//import * as facemesh from \"@tensorflow-models/facemesh\";\nimport Webcam from \"react-webcam\";\n\n\nfunction App() {\n  //set up references\n  const webcamRef = useRef(null);\n  const canvasRef = useRef (null);\n\n  // load facemesh\n  const runFacemesh = async () =>{\n    console.log('hi')\n    const net = await faceLandmarksDetection.load(faceLandmarksDetection.SupportedPackages.mediapipeFacemesh);\n    setInterval(()=>{\n      detect(net);\n    },1500)\n  };\n\n  // detect function\n  const detect = async(net) =>{\n    //check to make sure webcame is ready for detection\n    if(\n      typeof webcamRef.currrent !== \"undefined\" && webcamRef.current !== null && webcamRef.current.video.readyState===4){\n        await tf.setBackend('cpu');\n        //get video properties\n        const video = webcamRef.current.video;\n        const videoWidth = webcamRef.current.video.videoWidth;\n        const videoHeight = webcamRef.current.video.videoHeight;\n        //set video width\n        webcamRef.current.video.width = videoWidth;\n        webcamRef.current.video.height = videoHeight\n        //set canvas width\n        canvasRef.current.width = videoWidth;\n        canvasRef.current.height = videoHeight;\n        //make detections\n        const face = await net.estimateFaces(video);\n        if (face){\n          console.log(face)\n        }\n        // get canvas context for drawing\n      }\n  }\n\n  runFacemesh();\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <Webcam ref={webcamRef} style={\n        {\n        position:\"absolute\",\n        marginLeft: \"auto\",\n        marginRight: \"auto\",\n        left: 0,\n        right: 0,\n        textAlign: \"center\",\n        zIndex: 9,\n        width: 640,\n        height: 480\n        }\n      }/>\n      <canvas ref={canvasRef}\n      style={\n        {\n          position:\"absolute\",\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          left: 0,\n          right: 0,\n          textAlign: \"center\",\n          zIndex: 9,\n          width: 640,\n          height: 480\n          }\n      } />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}